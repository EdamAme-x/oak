"use strict";
///<reference path="../deno/stable/lib.deno.d.ts" />
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.setInterval = exports.setTimeout = exports.prompt = exports.confirm = exports.alert = void 0;
const fs_1 = require("fs");
const readlineSync_js_1 = require("./readlineSync.js");
exports.alert = (_a = globalThis["alert"]) !== null && _a !== void 0 ? _a : function alert(message) {
    (0, fs_1.writeSync)(process.stdout.fd, new TextEncoder().encode(`${message} [Enter] `));
    (0, readlineSync_js_1.readlineSync)();
};
exports.confirm = (_b = globalThis["confirm"]) !== null && _b !== void 0 ? _b : function confirm(message) {
    (0, fs_1.writeSync)(process.stdout.fd, new TextEncoder().encode(`${message} [y/N] `));
    const result = (0, readlineSync_js_1.readlineSync)();
    return ["y", "Y"].includes(result);
};
exports.prompt = (_c = globalThis["prompt"]) !== null && _c !== void 0 ? _c : function prompt(message, defaultValue = undefined) {
    (0, fs_1.writeSync)(process.stdout.fd, new TextEncoder().encode(`${message} ${defaultValue == null ? "" : `[${defaultValue}]`} `));
    const result = (0, readlineSync_js_1.readlineSync)();
    return result.length > 0 ? result : defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
};
const originalSetTimeout = globalThis.setTimeout;
function setTimeout(cb, delay, ...args) {
    const result = originalSetTimeout(cb, delay, ...args);
    // node may return a Timeout object, but return the primitive instead
    return typeof result === "number"
        ? result
        : result[Symbol.toPrimitive]();
}
exports.setTimeout = setTimeout;
const originalSetInterval = globalThis.setInterval;
function setInterval(cb, delay, ...args) {
    const result = originalSetInterval(cb, delay, ...args);
    // node may return a Timeout object, but return the primitive instead
    return typeof result === "number"
        ? result
        : result[Symbol.toPrimitive]();
}
exports.setInterval = setInterval;
